#!/usr/bin/env python
import ConfigParser

import fileinput
import os
from subprocess import check_output

config = ConfigParser.ConfigParser()
try:
    config.read('deploy_config')
except:
    exit()


for line in fileinput.input():
    old_ref, new_ref, branch = line.strip().split(' ')
    # print old_ref, new_ref, branch

    if 'refs/heads' in branch:
        branch = branch.split('/')[2]

    if branch in config.sections():
        section = dict(config.items(branch))
    elif '*' in config.sections():
        section = dict(config.items('*'))

    if '%s' in section['path']:
        section['path'] = section['path'] % branch
    if new_ref == '0000000000000000000000000000000000000000' and \
                    section.get('deletable', 'false').lower() in ('true', 'off', '0', 'no'):
        print 'Deleting branch', branch
        check_output(['rm', '-rf', section['path']])
    else:
        print 'Checking out', branch, 'in', section['path']
        check_output(['rm', '-rf', section['path']])
        if not os.path.exists(section['path']):
            os.makedirs(section['path'])
        os.environ['GIT_WORK_TREE'] = section['path']
        file_name = 'branch-' + branch + '.tar.gz'
        check_output(['git','archive', '--format=tar.gz', '-o'+file_name, branch])
        old_dir = os.getcwd()
        os.chdir(section['path'])
        file_path = os.path.join(old_dir, file_name)
        check_output(['tar', 'xf', file_path])